# Generated by Django 5.1.6 on 2025-04-05 18:43

import django.db.models.deletion
from django.db import migrations, models


# <<< Function to migrate data >>>
def migrate_post_area_data(apps, schema_editor):
    Post = apps.get_model('news_app', 'Post')
    Area = apps.get_model('news_app', 'Area')
    db_alias = schema_editor.connection.alias

    problematic_posts = [] # Keep track of posts that still fail
    processed_count = 0
    created_areas_count = 0
    post_iterator = Post.objects.using(db_alias).iterator()

    while True:
        try:
            post = next(post_iterator)
            processed_count += 1
            area_name_str = post.area # This is the CharField value

            if not isinstance(area_name_str, str) or not area_name_str.strip():
                problematic_posts.append({'pk': post.pk, 'area_name': area_name_str, 'reason': 'Invalid or empty area name'})
                continue

            area_name_normalized = area_name_str.lower().strip()
            if not area_name_normalized:
                 problematic_posts.append({'pk': post.pk, 'area_name': area_name_str, 'reason': 'Area name normalized to empty string'})
                 continue

            try:
                # Use get_or_create to find or create the Area (case-insensitive)
                area_obj, created = Area.objects.using(db_alias).get_or_create(
                    name=area_name_normalized
                )
                if created:
                    created_areas_count += 1
                    print(f"    Created new Area: '{area_name_normalized}' (PK: {area_obj.pk})")

                # Update post.area with the Area's PK (as string)
                Post.objects.using(db_alias).filter(pk=post.pk).update(area=str(area_obj.pk))

            except Exception as e:
                 # Catch any unexpected errors during get_or_create/update
                 problematic_posts.append({'pk': post.pk, 'area_name': area_name_str, 'reason': f'Error during get_or_create/update: {e}'})

        except StopIteration:
            break # End of iterator
        except Exception as e:
            # Catch errors during iteration itself
            print(f"Error processing post stream: {e}")
            # If iteration fails, it's likely a bigger issue, so re-raise
            raise

    print(f"\nProcessed {processed_count} posts.")
    if created_areas_count > 0:
        print(f"Created {created_areas_count} new Area objects.")

    if problematic_posts:
        print("\nWarning: Could not process the following Post records due to errors:")
        for p in problematic_posts:
            print(f"  Post PK: {p['pk']}, Area Value: '{p['area_name']}', Reason: {p['reason']}")
        # Decide if you want to raise an Exception here or allow migration to continue
        # For now, we'll let it continue but warn the user.
        print("Migration will continue, but please review the posts listed above.")
    else:
        print("\nPost area data migration step completed successfully.")


# <<< Reverse function (noop for simplicity) >>>
def reverse_migrate_post_area_data(apps, schema_editor):
    # Reversing requires mapping Area ID back to name, complex.
    print("Reverse migration for Post area data is complex and not implemented.")
    # Consider raising migrations.IrreversibleError if strictness is needed
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('news_app', '0024_remove_area_display_name'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='area',
            name='articles',
        ),
        migrations.RemoveField(
            model_name='area',
            name='posts',
        ),
        migrations.AddField(
            model_name='article',
            name='area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='news_app.area'),
        ),
        migrations.AlterField(
            model_name='article',
            name='category',
            field=models.CharField(default='news', max_length=100),
        ),
        # <<< Add the data migration BEFORE altering Post.area >>>
        migrations.RunPython(migrate_post_area_data, reverse_code=reverse_migrate_post_area_data),
        # Original AlterField for Post.area
        migrations.AlterField(
            model_name='post',
            name='area',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='area_posts', to='news_app.area'),
        ),
    ]
